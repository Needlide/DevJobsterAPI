using Dapper;
using DevJobsterAPI.Common.Exceptions.DatabaseExceptions;
using DevJobsterAPI.Database;
using DevJobsterAPI.Database.Services;
using DevJobsterAPI.DatabaseModels.Chat;
using DevJobsterAPI.DatabaseModels.Recruiter;
using DevJobsterAPI.DatabaseModels.RequestModels.Chat;
using DevJobsterAPI.DatabaseModels.RequestModels.Recruiter;
using DevJobsterAPI.DatabaseModels.RequestModels.User;
using DevJobsterAPI.DatabaseModels.RequestModels.Vacancy;
using DevJobsterAPI.DatabaseModels.Security;
using DevJobsterAPI.DatabaseModels.User;
using DevJobsterAPI.DatabaseModels.Vacancy;
using Npgsql;
using Testcontainers.PostgreSql;

namespace DevJobsterAPI.Tests;

public class UserSpaceServiceTests : IAsyncLifetime
{
    private readonly PostgreSqlContainer _postgresContainer;
    private string? _connectionString;
    private DbContext _dbContext;

    public UserSpaceServiceTests()
    {
        _postgresContainer = new PostgreSqlBuilder()
            .WithImage("postgres:latest")
            .WithDatabase("diplomadb")
            .WithUsername("diplomadev")
            .WithPassword("12345")
            .Build();
    }

    public async Task InitializeAsync()
    {
        DefaultTypeMap.MatchNamesWithUnderscores = true;

        await _postgresContainer.StartAsync();
        _connectionString = _postgresContainer.GetConnectionString();

        // Create the database schema
        _dbContext = new DbContext(_connectionString);
        var connection = _dbContext.Connection;

        const string sqlDatabaseInit =
            """
            create table admins
            (
                first_name varchar(255)           not null,
                last_name  varchar(255)           not null,
                type       bit default '1'::"bit" not null,
                created_at timestamp              not null,
                email      varchar(250)           not null,
                admin_id   uuid                   not null
                    constraint admins_pk
                        primary key
            );

            comment on column admins.type is '0 - admin, 1 - moderator';

            alter table admins
                owner to diplomadev;

            create table applications
            (
                application_id integer generated by default as identity
                    primary key,
                user_id        uuid      not null,
                vacancy_id     uuid      not null,
                created_at     timestamp not null,
                constraint unique_user_vacancy
                    unique (user_id, vacancy_id)
            );

            alter table applications
                owner to diplomadev;

            create table logs
            (
                log_id     integer generated by default as identity
                    primary key,
                body       varchar(255) not null,
                created_at timestamp    not null,
                admin_id   uuid         not null
                    constraint logs_admins_admin_id_fk
                        references admins
            );

            alter table logs
                owner to diplomadev;

            create table registered_accounts
            (
                registered_account_id integer generated by default as identity
                    primary key,
                user_id               uuid,
                recruiter_id          uuid,
                checked               boolean default false not null,
                created_at            timestamp             not null
            );

            alter table registered_accounts
                owner to diplomadev;

            create table admin_registered_accounts
            (
                registered_account_id integer not null
                    references registered_accounts,
                admin_id              uuid    not null
                    constraint admin_registered_accounts_admins_admin_id_fk
                        references admins,
                constraint admin_registered_accounts_pk
                    primary key (registered_account_id, admin_id)
            );

            alter table admin_registered_accounts
                owner to diplomadev;

            create table unified_users
            (
                user_id    uuid                                not null
                    primary key,
                email      varchar(255)                        not null
                    unique,
                user_type  varchar(50)                         not null,
                created_at timestamp default CURRENT_TIMESTAMP not null
            );

            alter table unified_users
                owner to diplomadev;

            create table users
            (
                user_id             uuid                        not null
                    primary key
                    constraint users_unified_users_user_id_fk
                        references unified_users,
                first_name          varchar(255)                not null,
                last_name           varchar(255)                not null,
                email               varchar(255)                not null,
                skills              varchar(255),
                years_of_experience char(3) default '0'::bpchar not null,
                location            varchar(255)                not null,
                english_level       char    default '1'::bpchar not null,
                created_at          timestamp                   not null,
                role                varchar(250)                not null
            );

            comment on column users.years_of_experience is 'Number converted to string';

            comment on column users.english_level is 'Levels are represented by 1-6 digits';

            alter table users
                owner to diplomadev;

            create table recruiters
            (
                recruiter_id uuid         not null
                    primary key
                    constraint recruiters_unified_users_user_id_fk
                        references unified_users,
                first_name   varchar(255) not null,
                last_name    varchar(255) not null,
                email        varchar(255) not null,
                company      varchar(255) not null,
                phone_number char(12)     not null,
                notes        varchar(255),
                created_at   timestamp    not null
            );

            comment on column recruiters.phone_number is 'only digits, without + sign';

            comment on column recruiters.notes is 'for any details written by recruiter';

            alter table recruiters
                owner to diplomadev;

            create table chats
            (
                chat_id            uuid      not null
                    primary key,
                user_id            uuid      not null
                    references users,
                recruiter_id       uuid      not null
                    references recruiters,
                number_of_messages smallint  not null,
                created_at         timestamp not null
            );

            alter table chats
                owner to diplomadev;

            create table messages
            (
                message_id   uuid      not null
                    primary key,
                body         text      not null,
                chat_id      uuid      not null
                    references chats,
                user_id      uuid
                    references users,
                recruiter_id uuid
                    references recruiters,
                created_at   timestamp not null
            );

            comment on column messages.user_id is 'used if sent by user';

            comment on column messages.recruiter_id is 'used if sent by recruiter';

            alter table messages
                owner to diplomadev;

            create table vacancies
            (
                vacancy_id      uuid         not null
                    primary key,
                recruiter_id    uuid         not null
                    references recruiters,
                title           varchar(255) not null,
                description     text         not null,
                salary          integer      not null,
                requirements    varchar(255) not null,
                company_website varchar(255) not null,
                type_of_job     char         not null,
                location        char         not null,
                country         varchar(255) not null,
                benefits        varchar(255),
                created_at      timestamp    not null
            );

            comment on column vacancies.type_of_job is '1-3, 1 - outstaff, 2 - full time, 3 - part time';

            comment on column vacancies.location is '1-3, 1 - office, 2 - remote, 3 - office/remote';

            alter table vacancies
                owner to diplomadev;

            create table reports
            (
                report_id        integer generated by default as identity
                    primary key,
                user_id          uuid
                    references users,
                recruiter_id     uuid
                    references recruiters,
                title            varchar(255) not null,
                body             text         not null,
                created_at       timestamp    not null,
                report_object_id uuid         not null
            );

            alter table reports
                owner to diplomadev;

            create table admin_reports
            (
                report_id integer not null
                    references reports,
                admin_id  uuid    not null
                    constraint admin_reports_admins_admin_id_fk
                        references admins,
                constraint admin_reports_pk
                    primary key (report_id, admin_id)
            );

            alter table admin_reports
                owner to diplomadev;

            create table user_authentication
            (
                auth_id       uuid         not null
                    primary key,
                user_id       uuid         not null
                    references unified_users
                        on delete cascade,
                password_hash varchar(255) not null
            );

            alter table user_authentication
                owner to diplomadev;

            create table accounts
            (
                id         uuid not null
                    primary key,
                email      text not null
                    unique,
                role       text not null
                    constraint accounts_role_check
                        check (role = ANY (ARRAY ['user'::text, 'recruiter'::text, 'admin'::text])),
                created_at timestamp default now()
            );

            alter table accounts
                owner to diplomadev;
            """;

        await connection.ExecuteAsync(sqlDatabaseInit);
    }

    public async Task DisposeAsync()
    {
        _dbContext.Dispose();
        await _postgresContainer.DisposeAsync();
    }

    [Fact]
    public async Task GetAllVacanciesAsync()
    {
        // Arrange
        var userManagementService = new UserManagementService(_dbContext);

        Recruiter recruiter = new
        (
            "FirstName",
            "LastName",
            "example@example.com",
            "company",
            "123433255"
        );

        RecruiterRegistration recruiterRegistration = new
        (recruiter,
            new UserAuthentication
            (
                recruiter.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        await userManagementService.CreateRecruiterAsync(recruiterRegistration);

        Vacancy vacancy = new
        (
            "Title",
            "Description",
            123,
            "Requirements",
            "https://example.com",
            "1",
            "1",
            "Country",
            recruiter.RecruiterId);

        Vacancy vacancy1 = new
        (
            "Title",
            "Description",
            123,
            "Requirements",
            "https://example.com",
            "1",
            "1",
            "Country",
            recruiter.RecruiterId
        );

        Vacancy vacancy2 = new
        (
            "Title",
            "Description",
            123,
            "Requirements",
            "https://example.com",
            "1",
            "1",
            "Country",
            recruiter.RecruiterId
        );

        Vacancy vacancy3 = new
        (
            "Title",
            "Description",
            123,
            "Requirements",
            "https://example.com",
            "1",
            "1",
            "Country",
            recruiter.RecruiterId
        );

        List<Vacancy> expectedVacancies = [vacancy, vacancy1, vacancy2, vacancy3];

        AddVacancy addVacancy = new(vacancy);

        AddVacancy addVacancy1 = new(vacancy1);

        AddVacancy addVacancy2 = new(vacancy2);

        AddVacancy addVacancy3 = new(vacancy3);

        var service = new UserSpaceService(_dbContext);

        await service.CreateVacancyAsync(addVacancy);
        await service.CreateVacancyAsync(addVacancy1);
        await service.CreateVacancyAsync(addVacancy2);
        await service.CreateVacancyAsync(addVacancy3);

        // Act
        var vacancies = await service.GetAllVacanciesAsync();

        // Assert
        var collection = vacancies.ToList();
        Assert.NotEmpty(collection);
        Assert.Equal(expectedVacancies.Count, collection.Count);
    }

    [Fact]
    public async Task GetVacancyByIdAsync()
    {
        // Arrange
        var userManagementService = new UserManagementService(_dbContext);

        Recruiter recruiter = new
        (
            "FirstName",
            "LastName",
            "example1@example.com",
            "company",
            "123433255"
        );

        RecruiterRegistration recruiterRegistration = new
        (recruiter,
            new UserAuthentication
            (
                recruiter.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        await userManagementService.CreateRecruiterAsync(recruiterRegistration);

        Vacancy expectedVacancy = new
        (
            "Title",
            "Description",
            123,
            "Requirements",
            "https://example.com",
            "1",
            "1",
            "Country",
            recruiter.RecruiterId);

        AddVacancy addVacancy = new(expectedVacancy);

        var service = new UserSpaceService(_dbContext);

        await service.CreateVacancyAsync(addVacancy);

        var id = addVacancy.VacancyId;

        // Act
        var vacancy = await service.GetVacancyByIdAsync(id);

        // Assert
        Assert.NotNull(vacancy);
        Assert.Equal(id, vacancy.VacancyId);
    }

    [Fact]
    public async Task GetVacancyByIdAsync_EmptyGuid_ReturnsEmptyCollection()
    {
        // Arrange
        var id = Guid.Empty;

        var service = new UserSpaceService(_dbContext);

        // Act
        var vacancy = await service.GetVacancyByIdAsync(id);

        // Assert
        Assert.Null(vacancy);
    }

    [Fact]
    public async Task CreateVacancyAsync_InsertsExistingVacancy_AndThrowsException()
    {
        // Arrange
        var userManagementService = new UserManagementService(_dbContext);

        Recruiter recruiter = new
        (
            "FirstName",
            "LastName",
            "example2@example.com",
            "company",
            "123433255"
        );

        RecruiterRegistration recruiterRegistration = new
        (recruiter,
            new UserAuthentication
            (
                recruiter.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        await userManagementService.CreateRecruiterAsync(recruiterRegistration);

        Vacancy expectedVacancy = new
        (
            "Title",
            "Description",
            123,
            "Requirements",
            "https://example.com",
            "1",
            "1",
            "Country",
            recruiter.RecruiterId);

        AddVacancy addVacancy = new(expectedVacancy);

        var service = new UserSpaceService(_dbContext);

        await service.CreateVacancyAsync(addVacancy);

        // Act
        var exception = await Assert
            .ThrowsAsync<UniqueConstraintViolationException>
                (async () => await service.CreateVacancyAsync(addVacancy));

        // Assert
        Assert.Contains("already exists", exception.Message.ToLower());
    }

    [Fact]
    public async Task CreateVacancyAsync_InsertsVacancy_AndReturnsOne()
    {
        // Arrange
        var userManagementService = new UserManagementService(_dbContext);

        Recruiter recruiter = new
        (
            "FirstName",
            "LastName",
            "example3@example.com",
            "company",
            "123433255"
        );

        RecruiterRegistration recruiterRegistration = new
        (recruiter,
            new UserAuthentication
            (
                recruiter.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        await userManagementService.CreateRecruiterAsync(recruiterRegistration);

        Vacancy expectedVacancy = new
        (
            "Title",
            "Description",
            123,
            "Requirements",
            "https://example.com",
            "1",
            "1",
            "Country",
            recruiter.RecruiterId);

        AddVacancy addVacancy = new(expectedVacancy);

        var service = new UserSpaceService(_dbContext);

        // Act
        var result = await service.CreateVacancyAsync(addVacancy);

        // Assert
        Assert.Equal(1, result);

        await using var verifyConnection = new NpgsqlConnection(_connectionString);
        var retrievedVacancy = await verifyConnection.QueryFirstOrDefaultAsync<Vacancy>(
            "SELECT * FROM Vacancies WHERE vacancy_id = @VacancyId",
            new { addVacancy.VacancyId }
        );

        Assert.NotNull(retrievedVacancy);
        Assert.Equal(addVacancy.Title, retrievedVacancy.Title);
        Assert.Equal(addVacancy.Description, retrievedVacancy.Description);
    }

    [Fact]
    public async Task UpdateVacancyAsync_UpdatesVacancy_AndReturnsOne()
    {
        // Arrange
        var userManagementService = new UserManagementService(_dbContext);

        Recruiter recruiter = new
        (
            "FirstName",
            "LastName",
            "example4@example.com",
            "company",
            "123433255"
        );

        RecruiterRegistration recruiterRegistration = new
        (recruiter,
            new UserAuthentication
            (
                recruiter.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        await userManagementService.CreateRecruiterAsync(recruiterRegistration);

        Vacancy expectedVacancy = new
        (
            "Title",
            "Description",
            123,
            "Requirements",
            "https://example.com",
            "1",
            "1",
            "Country",
            recruiter.RecruiterId);

        AddVacancy addVacancy = new(expectedVacancy);

        var service = new UserSpaceService(_dbContext);

        await service.CreateVacancyAsync(addVacancy);

        UpdateVacancy updateVacancy = new
        (
            "updated",
            321,
            "updated",
            "updated",
            "1", "2",
            expectedVacancy.VacancyId
        );

        // Act
        var result = await service.UpdateVacancyAsync(updateVacancy);

        // Assert
        Assert.Equal(1, result);

        await using var verifyConnection = new NpgsqlConnection(_connectionString);
        var retrievedVacancy = await verifyConnection.QueryFirstOrDefaultAsync<Vacancy>(
            "SELECT * FROM Vacancies WHERE vacancy_id = @VacancyId",
            new { expectedVacancy.VacancyId }
        );

        Assert.NotNull(retrievedVacancy);
        Assert.Equal(updateVacancy.Requirements, retrievedVacancy.Requirements);
        Assert.Equal(updateVacancy.Description, retrievedVacancy.Description);
    }

    [Fact]
    public async Task DeleteVacancyAsync_DeletesVacancy_AndReturnsOne()
    {
        // Arrange
        var userManagementService = new UserManagementService(_dbContext);

        Recruiter recruiter = new
        (
            "FirstName",
            "LastName",
            "example5@example.com",
            "company",
            "123433255"
        );

        RecruiterRegistration recruiterRegistration = new
        (recruiter,
            new UserAuthentication
            (
                recruiter.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        await userManagementService.CreateRecruiterAsync(recruiterRegistration);

        Vacancy expectedVacancy = new
        (
            "Title",
            "Description",
            123,
            "Requirements",
            "https://example.com",
            "1",
            "1",
            "Country",
            recruiter.RecruiterId);

        AddVacancy addVacancy = new(expectedVacancy);

        var service = new UserSpaceService(_dbContext);

        await service.CreateVacancyAsync(addVacancy);

        var vacancyId = expectedVacancy.VacancyId;

        // Act
        var result = await service.DeleteVacancyAsync(vacancyId);

        var vacancy = await service.GetVacancyByIdAsync(vacancyId);

        // Assert
        Assert.Equal(1, result);
        Assert.Null(vacancy);
    }

    [Fact]
    public async Task CreateApplicationAsync_InsertsApplication_AndReturnsOne()
    {
        // Arrange
        var userManagementService = new UserManagementService(_dbContext);

        Recruiter recruiter = new
        (
            "FirstName",
            "LastName",
            "example6@example.com",
            "company",
            "123433255"
        );

        RecruiterRegistration recruiterRegistration = new
        (recruiter,
            new UserAuthentication
            (
                recruiter.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        await userManagementService.CreateRecruiterAsync(recruiterRegistration);

        Vacancy expectedVacancy = new
        (
            "Title",
            "Description",
            123,
            "Requirements",
            "https://example.com",
            "1",
            "1",
            "Country",
            recruiter.RecruiterId);

        AddVacancy addVacancy = new(expectedVacancy);

        var service = new UserSpaceService(_dbContext);

        await service.CreateVacancyAsync(addVacancy);

        User user = new
        (
            "sdgsd",
            "sdgdsg",
            "example7@example.com",
            "sdgsdg",
            "45",
            "sdghf",
            "1"
        );

        UserAuthentication userAuthentication = new(user.UserId, "sgsdgsdgsdg");

        UserRegistration userRegistration = new(user, userAuthentication);

        await userManagementService.CreateUserAsync(userRegistration);

        AddApplication application = new(expectedVacancy.VacancyId);

        // Act
        var applicationId = await service.CreateApplicationAsync(user.UserId, application);

        // Assert
        Assert.True(applicationId > 0);

        await using var verifyConnection = new NpgsqlConnection(_connectionString);
        var retrievedApplication = await verifyConnection.QueryFirstOrDefaultAsync<Application>(
            "SELECT * FROM applications WHERE application_id = @ApplicationId",
            new { applicationId }
        );

        Assert.NotNull(retrievedApplication);
        Assert.Equal(application.VacancyId, retrievedApplication.VacancyId);
        Assert.Equal(user.UserId, retrievedApplication.UserId);
    }

    [Fact]
    public async Task CreateApplicationAsync_InsertsDuplicate_AndThrowsException()
    {
        // Arrange
        var userManagementService = new UserManagementService(_dbContext);

        Recruiter recruiter = new
        (
            "FirstName",
            "LastName",
            "example8@example.com",
            "company",
            "123433255"
        );

        RecruiterRegistration recruiterRegistration = new
        (recruiter,
            new UserAuthentication
            (
                recruiter.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        await userManagementService.CreateRecruiterAsync(recruiterRegistration);

        Vacancy expectedVacancy = new
        (
            "Title",
            "Description",
            123,
            "Requirements",
            "https://example.com",
            "1",
            "1",
            "Country",
            recruiter.RecruiterId);

        AddVacancy addVacancy = new(expectedVacancy);

        var service = new UserSpaceService(_dbContext);

        await service.CreateVacancyAsync(addVacancy);

        User user = new
        (
            "sdgsd",
            "sdgdsg",
            "example9@example.com",
            "sdgsdg",
            "45",
            "sdghf",
            "1"
        );

        UserAuthentication userAuthentication = new(user.UserId, "sgsdgsdgsdg");

        UserRegistration userRegistration = new(user, userAuthentication);

        await userManagementService.CreateUserAsync(userRegistration);

        AddApplication application = new(expectedVacancy.VacancyId);

        await service.CreateApplicationAsync(user.UserId, application);

        // Act
        var exception = await Assert
            .ThrowsAsync<UniqueConstraintViolationException>
                (async () => await service.CreateApplicationAsync(user.UserId, application));

        // Assert
        Assert.Contains("already exists", exception.Message.ToLower());
    }

    [Fact]
    public async Task GetApplicationsByUserIdAsync_ExistingUserId_ReturnsApplications()
    {
        // Arrange
        var userManagementService = new UserManagementService(_dbContext);

        Recruiter recruiter = new
        (
            "FirstName",
            "LastName",
            "example10@example.com",
            "company",
            "123433255"
        );

        RecruiterRegistration recruiterRegistration = new
        (recruiter,
            new UserAuthentication
            (
                recruiter.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        await userManagementService.CreateRecruiterAsync(recruiterRegistration);

        Vacancy expectedVacancy = new
        (
            "Title",
            "Description",
            123,
            "Requirements",
            "https://example.com",
            "1",
            "1",
            "Country",
            recruiter.RecruiterId);

        Vacancy expectedVacancy1 = new
        (
            "Title",
            "Description",
            123,
            "Requirements",
            "https://example.com",
            "1",
            "1",
            "Country",
            recruiter.RecruiterId);

        AddVacancy addVacancy = new(expectedVacancy);
        AddVacancy addVacancy1 = new(expectedVacancy1);

        var service = new UserSpaceService(_dbContext);

        await service.CreateVacancyAsync(addVacancy);
        await service.CreateVacancyAsync(addVacancy1);

        User user = new
        (
            "sdgsd",
            "sdgdsg",
            "example11@example.com",
            "sdgsdg",
            "45",
            "sdghf",
            "1"
        );

        UserAuthentication userAuthentication = new(user.UserId, "sgsdgsdgsdg");

        UserRegistration userRegistration = new(user, userAuthentication);

        await userManagementService.CreateUserAsync(userRegistration);

        AddApplication application = new(expectedVacancy.VacancyId);
        AddApplication application1 = new(expectedVacancy1.VacancyId);

        await service.CreateApplicationAsync(user.UserId, application);
        await service.CreateApplicationAsync(user.UserId, application1);

        // Act
        var result = await service.GetApplicationsByUserIdAsync(user.UserId);

        // Assert
        Assert.NotNull(result);
        var applications = result.ToList();
        Assert.NotEmpty(applications);
        Assert.Equal(2, applications.Count);
    }

    [Fact]
    public async Task GetApplicationsAsync_NotExistingUserId_ReturnsEmptyCollection()
    {
        // Arrange
        var service = new UserSpaceService(_dbContext);

        // Act
        var result = await service.GetApplicationsByUserIdAsync(Guid.Empty);

        // Assert
        Assert.NotNull(result);
        Assert.Empty(result);
    }

    [Fact]
    public async Task GetApplicationsByVacancyIdAsync_ExistingVacancyId_ReturnsApplications()
    {
        // Arrange
        var userManagementService = new UserManagementService(_dbContext);

        Recruiter recruiter = new
        (
            "FirstName",
            "LastName",
            "example12@example.com",
            "company",
            "123433255"
        );

        RecruiterRegistration recruiterRegistration = new
        (recruiter,
            new UserAuthentication
            (
                recruiter.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        await userManagementService.CreateRecruiterAsync(recruiterRegistration);

        Vacancy expectedVacancy = new
        (
            "Title",
            "Description",
            123,
            "Requirements",
            "https://example.com",
            "1",
            "1",
            "Country",
            recruiter.RecruiterId);

        AddVacancy addVacancy = new(expectedVacancy);

        var service = new UserSpaceService(_dbContext);

        await service.CreateVacancyAsync(addVacancy);

        User user = new
        (
            "sdgsd",
            "sdgdsg",
            "example13@example.com",
            "sdgsdg",
            "45",
            "sdghf",
            "1"
        );

        User user1 = new
        (
            "sdgsd",
            "sdgdsg",
            "example1@example.com",
            "sdgsdg",
            "45",
            "sdghf",
            "1"
        );

        UserAuthentication userAuthentication = new(user.UserId, "sgsdgsdgsdg");
        UserAuthentication userAuthentication1 = new(user1.UserId, "sgsdgsdgsdg");

        UserRegistration userRegistration = new(user, userAuthentication);
        UserRegistration userRegistration1 = new(user1, userAuthentication1);

        await userManagementService.CreateUserAsync(userRegistration);
        await userManagementService.CreateUserAsync(userRegistration1);

        AddApplication application = new(expectedVacancy.VacancyId);
        AddApplication application1 = new(expectedVacancy.VacancyId);

        await service.CreateApplicationAsync(user.UserId, application);
        await service.CreateApplicationAsync(user1.UserId, application1);

        // Act
        var result = await service
            .GetApplicationsByVacancyIdAsync(expectedVacancy.VacancyId);

        // Assert
        Assert.NotNull(result);
        var applications = result.ToList();
        Assert.NotEmpty(applications);
        Assert.Equal(2, applications.Count);
    }

    [Fact]
    public async Task GetApplicationsByVacancyIdAsync_NotExistingUserId_ReturnsEmptyCollection()
    {
        // Arrange
        var service = new UserSpaceService(_dbContext);

        // Act
        var result = await service.GetApplicationsByVacancyIdAsync(Guid.Empty);

        // Assert
        Assert.NotNull(result);
        Assert.Empty(result);
    }

    [Fact]
    public async Task GetChatsForUserAsync_ExistingUserId_ReturnsChats()
    {
        // Arrange
        var userManagementService = new UserManagementService(_dbContext);

        Recruiter recruiter = new
        (
            "FirstName",
            "LastName",
            "example14@example.com",
            "company",
            "123433255"
        );

        Recruiter recruiter1 = new
        (
            "FirstName",
            "LastName",
            "example15@example.com",
            "company",
            "123433255"
        );

        RecruiterRegistration recruiterRegistration = new
        (recruiter,
            new UserAuthentication
            (
                recruiter.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        RecruiterRegistration recruiterRegistration1 = new
        (recruiter1,
            new UserAuthentication
            (
                recruiter1.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        await userManagementService.CreateRecruiterAsync(recruiterRegistration);
        await userManagementService.CreateRecruiterAsync(recruiterRegistration1);

        var service = new UserSpaceService(_dbContext);

        User user = new
        (
            "sdgsd",
            "sdgdsg",
            "example16@example.com",
            "sdgsdg",
            "45",
            "sdghf",
            "1"
        );

        UserAuthentication userAuthentication = new(user.UserId, "sgsdgsdgsdg");

        UserRegistration userRegistration = new(user, userAuthentication);

        await userManagementService.CreateUserAsync(userRegistration);

        AddChat addChat = new(user.UserId, recruiter.RecruiterId);
        AddChat addChat1 = new(user.UserId, recruiter1.RecruiterId);

        await service.CreateChatAsync(addChat);
        await service.CreateChatAsync(addChat1);

        // Act
        var result = await service.GetChatsForUserAsync(user.UserId);

        // Assert
        Assert.NotNull(result);
        Assert.Equal(2, result.ToList().Count);
    }

    [Fact]
    public async Task GetChatsForUserAsync_NotExistingUserId_ReturnsEmptyCollection()
    {
        // Arrange
        var service = new UserSpaceService(_dbContext);

        // Act
        var result = await service.GetChatsForUserAsync(Guid.Empty);

        // Assert
        Assert.NotNull(result);
        Assert.Empty(result);
    }

    [Fact]
    public async Task GetChatByIdAsync_ExistingId_ReturnsChat()
    {
        // Arrange
        var userManagementService = new UserManagementService(_dbContext);

        Recruiter recruiter = new
        (
            "FirstName",
            "LastName",
            "example17@example.com",
            "company",
            "123433255"
        );

        Recruiter recruiter1 = new
        (
            "FirstName",
            "LastName",
            "example18@example.com",
            "company",
            "123433255"
        );

        RecruiterRegistration recruiterRegistration = new
        (recruiter,
            new UserAuthentication
            (
                recruiter.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        RecruiterRegistration recruiterRegistration1 = new
        (recruiter1,
            new UserAuthentication
            (
                recruiter1.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        await userManagementService.CreateRecruiterAsync(recruiterRegistration);
        await userManagementService.CreateRecruiterAsync(recruiterRegistration1);

        var service = new UserSpaceService(_dbContext);

        User user = new
        (
            "sdgsd",
            "sdgdsg",
            "example19@example.com",
            "sdgsdg",
            "45",
            "sdghf",
            "1"
        );

        UserAuthentication userAuthentication = new(user.UserId, "sgsdgsdgsdg");

        UserRegistration userRegistration = new(user, userAuthentication);

        await userManagementService.CreateUserAsync(userRegistration);

        AddChat addChat = new(user.UserId, recruiter.RecruiterId);

        var chatId = await service.CreateChatAsync(addChat);

        // Act
        var result = await service.GetChatByIdAsync(chatId);

        // Assert
        Assert.NotNull(result);
    }

    [Fact]
    public async Task GetChatByIdAsync_NotExistingId_ReturnsNull()
    {
        // Arrange
        var service = new UserSpaceService(_dbContext);

        // Act
        var result = await service.GetChatByIdAsync(Guid.Empty);

        // Assert
        Assert.Null(result);
    }

    [Fact]
    public async Task CreateChatAsync_InsertsChat_AndReturnsOne()
    {
        // Arrange
        var userManagementService = new UserManagementService(_dbContext);

        Recruiter recruiter = new
        (
            "FirstName",
            "LastName",
            "example20@example.com",
            "company",
            "123433255"
        );

        RecruiterRegistration recruiterRegistration = new
        (recruiter,
            new UserAuthentication
            (
                recruiter.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );


        await userManagementService.CreateRecruiterAsync(recruiterRegistration);

        var service = new UserSpaceService(_dbContext);

        User user = new
        (
            "sdgsd",
            "sdgdsg",
            "example21@example.com",
            "sdgsdg",
            "45",
            "sdghf",
            "1"
        );

        UserAuthentication userAuthentication = new(user.UserId, "sgsdgsdgsdg");

        UserRegistration userRegistration = new(user, userAuthentication);

        await userManagementService.CreateUserAsync(userRegistration);

        AddChat chat = new(user.UserId, recruiter.RecruiterId);

        // Act
        var chatId = await service.CreateChatAsync(chat);

        // Assert
        await using var verifyConnection = new NpgsqlConnection(_connectionString);
        var retrievedChat = await verifyConnection.QueryFirstOrDefaultAsync<Chat>(
            "SELECT * FROM chats WHERE chat_id = @ChatId",
            new { chatId }
        );

        Assert.NotNull(retrievedChat);
        Assert.Equal(chatId, retrievedChat.ChatId);
        Assert.Equal(user.UserId, retrievedChat.UserId);
    }

    [Fact]
    public async Task AddMessageToChatAsync_InsertsMessageToChat_AndReturnsOne()
    {
        // Arrange
        var userManagementService = new UserManagementService(_dbContext);

        Recruiter recruiter = new
        (
            "FirstName",
            "LastName",
            "example22@example.com",
            "company",
            "123433255"
        );

        RecruiterRegistration recruiterRegistration = new
        (recruiter,
            new UserAuthentication
            (
                recruiter.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        await userManagementService.CreateRecruiterAsync(recruiterRegistration);

        var service = new UserSpaceService(_dbContext);

        User user = new
        (
            "sdgsd",
            "sdgdsg",
            "example23@example.com",
            "sdgsdg",
            "45",
            "sdghf",
            "1"
        );

        UserAuthentication userAuthentication = new(user.UserId, "sgsdgsdgsdg");

        UserRegistration userRegistration = new(user, userAuthentication);

        await userManagementService.CreateUserAsync(userRegistration);

        AddChat chat = new(user.UserId, recruiter.RecruiterId);

        var chatId = await service.CreateChatAsync(chat);

        Message message = new("text my message cool", chatId, null, user.UserId);
        AddMessageWithSender addMessage = new(message.MessageId, chatId, "text my message cool", user.UserId, "User",
            DateTime.UtcNow);

        // Act
        var result = await service.CreateMessageAsync(addMessage);

        // Assert
        Assert.Equal(1, result);

        await using var verifyConnection = new NpgsqlConnection(_connectionString);
        var retrievedMessage = await verifyConnection.QueryFirstOrDefaultAsync<Message>(
            "SELECT * FROM messages WHERE message_id = @MessageId",
            new { message.MessageId }
        );

        Assert.NotNull(retrievedMessage);
        Assert.Equal(message.MessageId, retrievedMessage.MessageId);
        Assert.Equal(message.Body, retrievedMessage.Body);
    }

    [Fact]
    public async Task GetMessagesForChatAsync_ExistingId_ReturnsMessages()
    {
        // Arrange
        var userManagementService = new UserManagementService(_dbContext);

        Recruiter recruiter = new
        (
            "FirstName",
            "LastName",
            "example24@example.com",
            "company",
            "123433255"
        );

        RecruiterRegistration recruiterRegistration = new
        (recruiter,
            new UserAuthentication
            (
                recruiter.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        await userManagementService.CreateRecruiterAsync(recruiterRegistration);

        var service = new UserSpaceService(_dbContext);

        User user = new
        (
            "sdgsd",
            "sdgdsg",
            "example25@example.com",
            "sdgsdg",
            "45",
            "sdghf",
            "1"
        );

        UserAuthentication userAuthentication = new(user.UserId, "sgsdgsdgsdg");

        UserRegistration userRegistration = new(user, userAuthentication);

        await userManagementService.CreateUserAsync(userRegistration);

        AddChat chat = new(user.UserId, recruiter.RecruiterId);

        var chatId = await service.CreateChatAsync(chat);

        Message message = new("text my message cool", chatId, recruiter.RecruiterId);
        Message message1 = new("text my message cool", chatId, null, user.UserId);
        Message message2 = new("text my message cool", chatId, recruiter.RecruiterId);

        AddMessageWithSender addMessage = new(message.MessageId, chatId, "Text my message cool", recruiter.RecruiterId,
            "Recruiter", DateTime.UtcNow);
        AddMessageWithSender addMessage1 = new(message1.MessageId, chatId, "Text my message cool", user.UserId, "User",
            DateTime.UtcNow);
        AddMessageWithSender addMessage2 = new(message2.MessageId, chatId, "Text my message cool",
            recruiter.RecruiterId, "Recruiter", DateTime.UtcNow);

        await service.CreateMessageAsync(addMessage);
        await service.CreateMessageAsync(addMessage1);
        await service.CreateMessageAsync(addMessage2);

        // Act
        var result = await service.GetMessagesForChatAsync(chatId);

        Assert.NotNull(result);
        var collection = result.ToList();
        Assert.NotEmpty(collection);
        Assert.Equal(3, collection.Count);
    }

    [Fact]
    public async Task GetMessagesForChatAsync_NotExistingChatId_ReturnsEmptyCollection()
    {
        // Arrange
        var service = new UserSpaceService(_dbContext);

        // Act
        var result = await service.GetMessagesForChatAsync(Guid.Empty);

        // Assert
        Assert.Empty(result);
    }

    [Fact]
    public async Task GetMessageByIdAsync_ExistingId_ReturnsMessage()
    {
        // Arrange
        var userManagementService = new UserManagementService(_dbContext);

        Recruiter recruiter = new
        (
            "FirstName",
            "LastName",
            "example26@example.com",
            "company",
            "123433255"
        );

        RecruiterRegistration recruiterRegistration = new
        (recruiter,
            new UserAuthentication
            (
                recruiter.RecruiterId,
                "iuhgsdugsdvbsd;visdbvdsbvhhsdbvsb"
            )
        );

        await userManagementService.CreateRecruiterAsync(recruiterRegistration);

        var service = new UserSpaceService(_dbContext);

        User user = new
        (
            "sdgsd",
            "sdgdsg",
            "example27@example.com",
            "sdgsdg",
            "45",
            "sdghf",
            "1"
        );

        UserAuthentication userAuthentication = new(user.UserId, "sgsdgsdgsdg");

        UserRegistration userRegistration = new(user, userAuthentication);

        await userManagementService.CreateUserAsync(userRegistration);

        AddChat chat = new(user.UserId, recruiter.RecruiterId);

        var chatId = await service.CreateChatAsync(chat);

        Message message = new("text my message cool", chatId, recruiter.RecruiterId);
        AddMessageWithSender addMessage = new(message.MessageId, chatId, "text my message cool", recruiter.RecruiterId,
            "Recruiter", DateTime.UtcNow);

        await service.CreateMessageAsync(addMessage);

        // Act
        var result = await service.GetMessageByIdAsync(message.MessageId);

        // Assert
        Assert.NotNull(result);

        await using var verifyConnection = new NpgsqlConnection(_connectionString);
        var retrievedMessage = await verifyConnection.QueryFirstOrDefaultAsync<Message>(
            "SELECT * FROM messages WHERE message_id = @MessageId",
            new { message.MessageId }
        );

        Assert.NotNull(retrievedMessage);
        Assert.Equal(message.MessageId, retrievedMessage.MessageId);
        Assert.Equal(message.Body, retrievedMessage.Body);
    }
}